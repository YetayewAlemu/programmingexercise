 implementing a Python class that generates horizontal mini-term fragments from a list of predicates:
//python part
class PredicateGenerator:
    def __init__(self, relations):
        self.relations = relations

//plsql part
CREATE OR REPLACE TYPE predicate_generator AS OBJECT
  STATIC FUNCTION generate_fragments(p_predicates IN VARCHAR2) RETURN SYS.ODCIVARCHAR2LIST PIPELINED IS
    l_start_index NUMBER := 1;
    l_end_index NUMBER;
    l_fragment VARCHAR2(4000);
  BEGIN
    LOOP
      l_end_index := INSTR(p_predicates, ' OR ', l_start_index);
      IF l_end_index = 0 THEN
        l_end_index := INSTR(p_predicates, ')', l_start_index);
        IF l_end_index = 0 THEN
          EXIT;
        END IF;
      END IF;
      l_fragment := SUBSTR(p_predicates, l_start_index, l_end_index - l_start_index);
      l_start_index := l_end_index + 3;
      PIPE ROW(l_fragment);
    END LOOP;
  END generate_fragments;
END predicate_generator;
/
This class defines a static function called generate_fragments that takes a string of predicates as input and returns a pipelined table of fragments.
DECLARE
  l_fragments SYS.ODCIVARCHAR2LIST;
BEGIN
  l_fragments := predicate_generator.generate_fragments(
    '(col_a in (select list_col from table B) OR col_b in (select list_col from table B) OR col_c in (select list_col from table B))'
  );
  FOR i IN 1 .. l_fragments.COUNT LOOP
    DBMS_OUTPUT.PUT_LINE(l_fragments(i));
  END LOOP;
END;
